// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: metadata.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	Sync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*SyncInfo, error)
	GetMetadata(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Collector_GetMetadataClient, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Sync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*SyncInfo, error) {
	out := new(SyncInfo)
	err := c.cc.Invoke(ctx, "/collector.Collector/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) GetMetadata(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Collector_GetMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], "/collector.Collector/GetMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorGetMetadataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_GetMetadataClient interface {
	Recv() (*Metadata, error)
	grpc.ClientStream
}

type collectorGetMetadataClient struct {
	grpc.ClientStream
}

func (x *collectorGetMetadataClient) Recv() (*Metadata, error) {
	m := new(Metadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	Sync(context.Context, *wrapperspb.StringValue) (*SyncInfo, error)
	GetMetadata(*wrapperspb.StringValue, Collector_GetMetadataServer) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) Sync(context.Context, *wrapperspb.StringValue) (*SyncInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedCollectorServer) GetMetadata(*wrapperspb.StringValue, Collector_GetMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector.Collector/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Sync(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_GetMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).GetMetadata(m, &collectorGetMetadataServer{stream})
}

type Collector_GetMetadataServer interface {
	Send(*Metadata) error
	grpc.ServerStream
}

type collectorGetMetadataServer struct {
	grpc.ServerStream
}

func (x *collectorGetMetadataServer) Send(m *Metadata) error {
	return x.ServerStream.SendMsg(m)
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Collector_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMetadata",
			Handler:       _Collector_GetMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metadata.proto",
}
