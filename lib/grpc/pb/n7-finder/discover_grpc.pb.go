// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: discover.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoverClient is the client API for Discover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoverClient interface {
	LookupTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Stock, error)
}

type discoverClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoverClient(cc grpc.ClientConnInterface) DiscoverClient {
	return &discoverClient{cc}
}

func (c *discoverClient) LookupTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Stock, error) {
	out := new(Stock)
	err := c.cc.Invoke(ctx, "/finder.Discover/LookupTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoverServer is the server API for Discover service.
// All implementations must embed UnimplementedDiscoverServer
// for forward compatibility
type DiscoverServer interface {
	LookupTransaction(context.Context, *emptypb.Empty) (*Stock, error)
	mustEmbedUnimplementedDiscoverServer()
}

// UnimplementedDiscoverServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoverServer struct {
}

func (UnimplementedDiscoverServer) LookupTransaction(context.Context, *emptypb.Empty) (*Stock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupTransaction not implemented")
}
func (UnimplementedDiscoverServer) mustEmbedUnimplementedDiscoverServer() {}

// UnsafeDiscoverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoverServer will
// result in compilation errors.
type UnsafeDiscoverServer interface {
	mustEmbedUnimplementedDiscoverServer()
}

func RegisterDiscoverServer(s grpc.ServiceRegistrar, srv DiscoverServer) {
	s.RegisterService(&Discover_ServiceDesc, srv)
}

func _Discover_LookupTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServer).LookupTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finder.Discover/LookupTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServer).LookupTransaction(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Discover_ServiceDesc is the grpc.ServiceDesc for Discover service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discover_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finder.Discover",
	HandlerType: (*DiscoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupTransaction",
			Handler:    _Discover_LookupTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discover.proto",
}
