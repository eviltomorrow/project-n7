// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: repository.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepositoryClient is the client API for Repository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryClient interface {
	Sync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*SyncInfo, error)
	GetStockFull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Repository_GetStockFullClient, error)
	GetQuoteLatest(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Repository_GetQuoteLatestClient, error)
}

type repositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryClient(cc grpc.ClientConnInterface) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) Sync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*SyncInfo, error) {
	out := new(SyncInfo)
	err := c.cc.Invoke(ctx, "/repository.Repository/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetStockFull(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Repository_GetStockFullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repository_ServiceDesc.Streams[0], "/repository.Repository/GetStockFull", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryGetStockFullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Repository_GetStockFullClient interface {
	Recv() (*Stock, error)
	grpc.ClientStream
}

type repositoryGetStockFullClient struct {
	grpc.ClientStream
}

func (x *repositoryGetStockFullClient) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *repositoryClient) GetQuoteLatest(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Repository_GetQuoteLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repository_ServiceDesc.Streams[1], "/repository.Repository/GetQuoteLatest", opts...)
	if err != nil {
		return nil, err
	}
	x := &repositoryGetQuoteLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Repository_GetQuoteLatestClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type repositoryGetQuoteLatestClient struct {
	grpc.ClientStream
}

func (x *repositoryGetQuoteLatestClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepositoryServer is the server API for Repository service.
// All implementations must embed UnimplementedRepositoryServer
// for forward compatibility
type RepositoryServer interface {
	Sync(context.Context, *wrapperspb.StringValue) (*SyncInfo, error)
	GetStockFull(*emptypb.Empty, Repository_GetStockFullServer) error
	GetQuoteLatest(*QuoteRequest, Repository_GetQuoteLatestServer) error
	mustEmbedUnimplementedRepositoryServer()
}

// UnimplementedRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryServer struct {
}

func (UnimplementedRepositoryServer) Sync(context.Context, *wrapperspb.StringValue) (*SyncInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedRepositoryServer) GetStockFull(*emptypb.Empty, Repository_GetStockFullServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockFull not implemented")
}
func (UnimplementedRepositoryServer) GetQuoteLatest(*QuoteRequest, Repository_GetQuoteLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuoteLatest not implemented")
}
func (UnimplementedRepositoryServer) mustEmbedUnimplementedRepositoryServer() {}

// UnsafeRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServer will
// result in compilation errors.
type UnsafeRepositoryServer interface {
	mustEmbedUnimplementedRepositoryServer()
}

func RegisterRepositoryServer(s grpc.ServiceRegistrar, srv RepositoryServer) {
	s.RegisterService(&Repository_ServiceDesc, srv)
}

func _Repository_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.Repository/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).Sync(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetStockFull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServer).GetStockFull(m, &repositoryGetStockFullServer{stream})
}

type Repository_GetStockFullServer interface {
	Send(*Stock) error
	grpc.ServerStream
}

type repositoryGetStockFullServer struct {
	grpc.ServerStream
}

func (x *repositoryGetStockFullServer) Send(m *Stock) error {
	return x.ServerStream.SendMsg(m)
}

func _Repository_GetQuoteLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RepositoryServer).GetQuoteLatest(m, &repositoryGetQuoteLatestServer{stream})
}

type Repository_GetQuoteLatestServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type repositoryGetQuoteLatestServer struct {
	grpc.ServerStream
}

func (x *repositoryGetQuoteLatestServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

// Repository_ServiceDesc is the grpc.ServiceDesc for Repository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Repository_Sync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockFull",
			Handler:       _Repository_GetStockFull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuoteLatest",
			Handler:       _Repository_GetQuoteLatest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "repository.proto",
}
